// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum CREATE_PLAYER_ERROR : int {
  CREATE_PLAYER_NONE = 0,
  CREATE_PLAYER_FAIL = 1,
  CREATE_PLAYER_SUCCESS = 2,
  CREATE_PLAYER_DUPLICATION = 3,
  CREATE_PLAYER_ERROR_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CREATE_PLAYER_ERROR_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CREATE_PLAYER_ERROR_IsValid(int value);
constexpr CREATE_PLAYER_ERROR CREATE_PLAYER_ERROR_MIN = CREATE_PLAYER_NONE;
constexpr CREATE_PLAYER_ERROR CREATE_PLAYER_ERROR_MAX = CREATE_PLAYER_DUPLICATION;
constexpr int CREATE_PLAYER_ERROR_ARRAYSIZE = CREATE_PLAYER_ERROR_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CREATE_PLAYER_ERROR_descriptor();
template<typename T>
inline const std::string& CREATE_PLAYER_ERROR_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CREATE_PLAYER_ERROR>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CREATE_PLAYER_ERROR_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CREATE_PLAYER_ERROR_descriptor(), enum_t_value);
}
inline bool CREATE_PLAYER_ERROR_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CREATE_PLAYER_ERROR* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CREATE_PLAYER_ERROR>(
    CREATE_PLAYER_ERROR_descriptor(), name, value);
}
enum SELECT_PLAYER_ERROR : int {
  SELECT_PLAYER_NONE = 0,
  SELECT_PLAYER_FAIL = 1,
  SELECT_PLAYER_SUCCESS = 2,
  SELECT_PLAYER_ERROR_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SELECT_PLAYER_ERROR_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SELECT_PLAYER_ERROR_IsValid(int value);
constexpr SELECT_PLAYER_ERROR SELECT_PLAYER_ERROR_MIN = SELECT_PLAYER_NONE;
constexpr SELECT_PLAYER_ERROR SELECT_PLAYER_ERROR_MAX = SELECT_PLAYER_SUCCESS;
constexpr int SELECT_PLAYER_ERROR_ARRAYSIZE = SELECT_PLAYER_ERROR_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SELECT_PLAYER_ERROR_descriptor();
template<typename T>
inline const std::string& SELECT_PLAYER_ERROR_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SELECT_PLAYER_ERROR>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SELECT_PLAYER_ERROR_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SELECT_PLAYER_ERROR_descriptor(), enum_t_value);
}
inline bool SELECT_PLAYER_ERROR_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SELECT_PLAYER_ERROR* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SELECT_PLAYER_ERROR>(
    SELECT_PLAYER_ERROR_descriptor(), name, value);
}
enum ENTER_GAME_ERROR : int {
  ENTER_GAME_NONE = 0,
  ENTER_GAME_FAIL = 1,
  ENTER_GAME_SUCCESS = 2,
  ENTER_GAME_ERROR_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ENTER_GAME_ERROR_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ENTER_GAME_ERROR_IsValid(int value);
constexpr ENTER_GAME_ERROR ENTER_GAME_ERROR_MIN = ENTER_GAME_NONE;
constexpr ENTER_GAME_ERROR ENTER_GAME_ERROR_MAX = ENTER_GAME_SUCCESS;
constexpr int ENTER_GAME_ERROR_ARRAYSIZE = ENTER_GAME_ERROR_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENTER_GAME_ERROR_descriptor();
template<typename T>
inline const std::string& ENTER_GAME_ERROR_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENTER_GAME_ERROR>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENTER_GAME_ERROR_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENTER_GAME_ERROR_descriptor(), enum_t_value);
}
inline bool ENTER_GAME_ERROR_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENTER_GAME_ERROR* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENTER_GAME_ERROR>(
    ENTER_GAME_ERROR_descriptor(), name, value);
}
enum MOVE_ERROR : int {
  MOVE_NONE = 0,
  MOVE_FAIL = 1,
  MOVE_SUCCESS = 2,
  MOVE_ERROR_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MOVE_ERROR_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MOVE_ERROR_IsValid(int value);
constexpr MOVE_ERROR MOVE_ERROR_MIN = MOVE_NONE;
constexpr MOVE_ERROR MOVE_ERROR_MAX = MOVE_SUCCESS;
constexpr int MOVE_ERROR_ARRAYSIZE = MOVE_ERROR_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MOVE_ERROR_descriptor();
template<typename T>
inline const std::string& MOVE_ERROR_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MOVE_ERROR>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MOVE_ERROR_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MOVE_ERROR_descriptor(), enum_t_value);
}
inline bool MOVE_ERROR_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MOVE_ERROR* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MOVE_ERROR>(
    MOVE_ERROR_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::CREATE_PLAYER_ERROR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CREATE_PLAYER_ERROR>() {
  return ::Protocol::CREATE_PLAYER_ERROR_descriptor();
}
template <> struct is_proto_enum< ::Protocol::SELECT_PLAYER_ERROR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::SELECT_PLAYER_ERROR>() {
  return ::Protocol::SELECT_PLAYER_ERROR_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ENTER_GAME_ERROR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ENTER_GAME_ERROR>() {
  return ::Protocol::ENTER_GAME_ERROR_descriptor();
}
template <> struct is_proto_enum< ::Protocol::MOVE_ERROR> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::MOVE_ERROR>() {
  return ::Protocol::MOVE_ERROR_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
