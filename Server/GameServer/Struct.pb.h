// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class PlayerPos;
struct PlayerPosDefaultTypeInternal;
extern PlayerPosDefaultTypeInternal _PlayerPos_default_instance_;
class SessionInfo;
struct SessionInfoDefaultTypeInternal;
extern SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::PlayerInfo* Arena::CreateMaybeMessage<::Protocol::PlayerInfo>(Arena*);
template<> ::Protocol::PlayerPos* Arena::CreateMaybeMessage<::Protocol::PlayerPos>(Arena*);
template<> ::Protocol::SessionInfo* Arena::CreateMaybeMessage<::Protocol::SessionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class SessionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SessionInfo) */ {
 public:
  inline SessionInfo() : SessionInfo(nullptr) {}
  ~SessionInfo() override;
  explicit PROTOBUF_CONSTEXPR SessionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionInfo(const SessionInfo& from);
  SessionInfo(SessionInfo&& from) noexcept
    : SessionInfo() {
    *this = ::std::move(from);
  }

  inline SessionInfo& operator=(const SessionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionInfo& operator=(SessionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionInfo* internal_default_instance() {
    return reinterpret_cast<const SessionInfo*>(
               &_SessionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionInfo& a, SessionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionInfo& from) {
    SessionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SessionInfo";
  }
  protected:
  explicit SessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // uint64 session_id = 1;
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SessionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t session_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 4,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kLvFieldNumber = 5,
    kHpFieldNumber = 6,
    kAtkFieldNumber = 7,
    kIdxFieldNumber = 9,
    kDfFieldNumber = 8,
  };
  // string playerName = 4;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // uint32 lv = 5;
  void clear_lv();
  uint32_t lv() const;
  void set_lv(uint32_t value);
  private:
  uint32_t _internal_lv() const;
  void _internal_set_lv(uint32_t value);
  public:

  // float hp = 6;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // float atk = 7;
  void clear_atk();
  float atk() const;
  void set_atk(float value);
  private:
  float _internal_atk() const;
  void _internal_set_atk(float value);
  public:

  // uint64 idx = 9;
  void clear_idx();
  uint64_t idx() const;
  void set_idx(uint64_t value);
  private:
  uint64_t _internal_idx() const;
  void _internal_set_idx(uint64_t value);
  public:

  // float df = 8;
  void clear_df();
  float df() const;
  void set_df(float value);
  private:
  float _internal_df() const;
  void _internal_set_df(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    float x_;
    float y_;
    float z_;
    uint32_t lv_;
    float hp_;
    float atk_;
    uint64_t idx_;
    float df_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerPos) */ {
 public:
  inline PlayerPos() : PlayerPos(nullptr) {}
  ~PlayerPos() override;
  explicit PROTOBUF_CONSTEXPR PlayerPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerPos(const PlayerPos& from);
  PlayerPos(PlayerPos&& from) noexcept
    : PlayerPos() {
    *this = ::std::move(from);
  }

  inline PlayerPos& operator=(const PlayerPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerPos& operator=(PlayerPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerPos* internal_default_instance() {
    return reinterpret_cast<const PlayerPos*>(
               &_PlayerPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerPos& a, PlayerPos& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerPos& from) {
    PlayerPos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerPos";
  }
  protected:
  explicit PlayerPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kIdxFieldNumber = 4,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // uint64 idx = 4;
  void clear_idx();
  uint64_t idx() const;
  void set_idx(uint64_t value);
  private:
  uint64_t _internal_idx() const;
  void _internal_set_idx(uint64_t value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    uint64_t idx_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionInfo

// uint64 session_id = 1;
inline void SessionInfo::clear_session_id() {
  _impl_.session_id_ = uint64_t{0u};
}
inline uint64_t SessionInfo::_internal_session_id() const {
  return _impl_.session_id_;
}
inline uint64_t SessionInfo::session_id() const {
  // @@protoc_insertion_point(field_get:Protocol.SessionInfo.session_id)
  return _internal_session_id();
}
inline void SessionInfo::_internal_set_session_id(uint64_t value) {
  
  _impl_.session_id_ = value;
}
inline void SessionInfo::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:Protocol.SessionInfo.session_id)
}

// -------------------------------------------------------------------

// PlayerInfo

// float x = 1;
inline void PlayerInfo::clear_x() {
  _impl_.x_ = 0;
}
inline float PlayerInfo::_internal_x() const {
  return _impl_.x_;
}
inline float PlayerInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.x)
  return _internal_x();
}
inline void PlayerInfo::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PlayerInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.x)
}

// float y = 2;
inline void PlayerInfo::clear_y() {
  _impl_.y_ = 0;
}
inline float PlayerInfo::_internal_y() const {
  return _impl_.y_;
}
inline float PlayerInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.y)
  return _internal_y();
}
inline void PlayerInfo::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PlayerInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.y)
}

// float z = 3;
inline void PlayerInfo::clear_z() {
  _impl_.z_ = 0;
}
inline float PlayerInfo::_internal_z() const {
  return _impl_.z_;
}
inline float PlayerInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.z)
  return _internal_z();
}
inline void PlayerInfo::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PlayerInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.z)
}

// string playerName = 4;
inline void PlayerInfo::clear_playername() {
  _impl_.playername_.ClearToEmpty();
}
inline const std::string& PlayerInfo::playername() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_playername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.playerName)
}
inline std::string* PlayerInfo::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerInfo.playerName)
  return _s;
}
inline const std::string& PlayerInfo::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void PlayerInfo::_internal_set_playername(const std::string& value) {
  
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_playername() {
  
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_playername() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerInfo.playerName)
  return _impl_.playername_.Release();
}
inline void PlayerInfo::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerInfo.playerName)
}

// uint32 lv = 5;
inline void PlayerInfo::clear_lv() {
  _impl_.lv_ = 0u;
}
inline uint32_t PlayerInfo::_internal_lv() const {
  return _impl_.lv_;
}
inline uint32_t PlayerInfo::lv() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.lv)
  return _internal_lv();
}
inline void PlayerInfo::_internal_set_lv(uint32_t value) {
  
  _impl_.lv_ = value;
}
inline void PlayerInfo::set_lv(uint32_t value) {
  _internal_set_lv(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.lv)
}

// float hp = 6;
inline void PlayerInfo::clear_hp() {
  _impl_.hp_ = 0;
}
inline float PlayerInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline float PlayerInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.hp)
  return _internal_hp();
}
inline void PlayerInfo::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void PlayerInfo::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.hp)
}

// float atk = 7;
inline void PlayerInfo::clear_atk() {
  _impl_.atk_ = 0;
}
inline float PlayerInfo::_internal_atk() const {
  return _impl_.atk_;
}
inline float PlayerInfo::atk() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.atk)
  return _internal_atk();
}
inline void PlayerInfo::_internal_set_atk(float value) {
  
  _impl_.atk_ = value;
}
inline void PlayerInfo::set_atk(float value) {
  _internal_set_atk(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.atk)
}

// float df = 8;
inline void PlayerInfo::clear_df() {
  _impl_.df_ = 0;
}
inline float PlayerInfo::_internal_df() const {
  return _impl_.df_;
}
inline float PlayerInfo::df() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.df)
  return _internal_df();
}
inline void PlayerInfo::_internal_set_df(float value) {
  
  _impl_.df_ = value;
}
inline void PlayerInfo::set_df(float value) {
  _internal_set_df(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.df)
}

// uint64 idx = 9;
inline void PlayerInfo::clear_idx() {
  _impl_.idx_ = uint64_t{0u};
}
inline uint64_t PlayerInfo::_internal_idx() const {
  return _impl_.idx_;
}
inline uint64_t PlayerInfo::idx() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.idx)
  return _internal_idx();
}
inline void PlayerInfo::_internal_set_idx(uint64_t value) {
  
  _impl_.idx_ = value;
}
inline void PlayerInfo::set_idx(uint64_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.idx)
}

// -------------------------------------------------------------------

// PlayerPos

// float x = 1;
inline void PlayerPos::clear_x() {
  _impl_.x_ = 0;
}
inline float PlayerPos::_internal_x() const {
  return _impl_.x_;
}
inline float PlayerPos::x() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerPos.x)
  return _internal_x();
}
inline void PlayerPos::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PlayerPos::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerPos.x)
}

// float y = 2;
inline void PlayerPos::clear_y() {
  _impl_.y_ = 0;
}
inline float PlayerPos::_internal_y() const {
  return _impl_.y_;
}
inline float PlayerPos::y() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerPos.y)
  return _internal_y();
}
inline void PlayerPos::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PlayerPos::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerPos.y)
}

// float z = 3;
inline void PlayerPos::clear_z() {
  _impl_.z_ = 0;
}
inline float PlayerPos::_internal_z() const {
  return _impl_.z_;
}
inline float PlayerPos::z() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerPos.z)
  return _internal_z();
}
inline void PlayerPos::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PlayerPos::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerPos.z)
}

// uint64 idx = 4;
inline void PlayerPos::clear_idx() {
  _impl_.idx_ = uint64_t{0u};
}
inline uint64_t PlayerPos::_internal_idx() const {
  return _impl_.idx_;
}
inline uint64_t PlayerPos::idx() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerPos.idx)
  return _internal_idx();
}
inline void PlayerPos::_internal_set_idx(uint64_t value) {
  
  _impl_.idx_ = value;
}
inline void PlayerPos::set_idx(uint64_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerPos.idx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
